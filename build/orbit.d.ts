import { Vector3, EventDispatcher, MOUSE, PerspectiveCamera } from 'three';
export declare class OrbitControls extends EventDispatcher {
    object: PerspectiveCamera;
    domElement: HTMLElement;
    enabled: boolean;
    target: Vector3;
    minDistance: number;
    maxDistance: number;
    minZoom: number;
    maxZoom: number;
    minPolarAngle: number;
    maxPolarAngle: number;
    minAzimuthAngle: number;
    maxAzimuthAngle: number;
    enableDamping: boolean;
    dampingFactor: number;
    zoomSpeed: number;
    rotateSpeed: number;
    panSpeed: number;
    screenSpacePanning: boolean;
    mouseButtons: {
        LEFT: MOUSE;
        MIDDLE: MOUSE;
        RIGHT: MOUSE;
    };
    target0: Vector3;
    position0: Vector3;
    zoom0: number;
    private changeEvent;
    private startEvent;
    private endEvent;
    private state;
    private spherical;
    private sphericalDelta;
    private scale;
    private panOffset;
    private zoomChanged;
    private rotateStart;
    private rotateEnd;
    private rotateDelta;
    private panStart;
    private panEnd;
    private panDelta;
    private dollyStart;
    private dollyEnd;
    private dollyDelta;
    constructor(object: PerspectiveCamera, domElement?: HTMLElement);
    getPolarAngle(): number;
    getAzimuthalAngle(): number;
    saveState(): void;
    reset(): void;
    update: () => boolean;
    dispose(): void;
    private getZoomScale;
    private rotateLeft;
    private rotateUp;
    private panLeft;
    private panUp;
    private pan;
    private dollyIn;
    private dollyOut;
    private handleMouseDownRotate;
    private handleMouseDownDolly;
    private handleMouseDownPan;
    private handleMouseMoveRotate;
    private handleMouseMoveDolly;
    private handleMouseMovePan;
    private handleMouseWheel;
    private handconstouchStartRotate;
    private handconstouchStartDollyPan;
    private handconstouchMoveRotate;
    private handconstouchMoveDollyPan;
    private onMouseDown;
    private onMouseMove;
    private onMouseUp;
    private onMouseWheel;
    private onTouchStart;
    private onTouchMove;
    private onTouchEnd;
    private onContextMenu;
}
//# sourceMappingURL=orbit.d.ts.map